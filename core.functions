#!/bin/bash

msg() { printf "\033[1;34m::\033[0m %s\n" "$@"; }
warn() { printf "\033[1;33m::\033[0m %s\n" "$@"; }
die() { printf "\033[1;31m::\033[0m %s\n" "$@"; exit 1; }

pushd () { command pushd "$@" > /dev/null || exit; }
popd () { command popd "$@" > /dev/null || exit; }

check_for_root()
{
	if [[ $EUID -ne 0 ]]; then
		die "You must be root to run 'build'"
	fi
}

check_for_arch()
{
	if [ -z "$1" ]; then
		die 'Architecture is not specified'
	fi
}

parse_architecture()
{
	check_for_arch "$1"

	case "$1" in
		x86_64) export xtarget="x86_64-linux-gnu" ;;
		arm64) export xtarget="aarch64-linux-gnu" ;;
		ppc64le) export xtarget="powerpc64le-linux-gnu" ;;
		ppc64) export xtarget="powerpc64-linux-gnu" ;;
		riscv64) export xtarget="riscv64-linux-gnu" ;;
		*) die 'Architecture called `'"${1}"'` is not supported by this build tool' ;;
	esac

	xhost="$(echo $(clang -dumpmachine) | sed -e 's/-[^-]*/-cross/')"
	
	export xhost
}

export_variables()
{
	check_for_arch "$1"
	parse_architecture "$1"

	cwd="$(pwd)"
	build="${cwd}/OUT.$1"
	rootfs="${build}/rootfs"
	tools="${build}/tools"
	tcrepo="${cwd}/toolchain"
	utils="${cwd}/utils"
	rarch="$1"
	
	export cwd build rootfs tools tcrepo utils rarch

	LANG="C"
	LC_ALL="C"
	PATH="${tools}/bin:$PATH"
	
	export LANG LC_ALL PATH

	if [ "$NOCCACHE" != "1" ]; then
		if [ -e "/usr/lib/ccache" ]; then
			export PATH="/usr/lib/ccache:$PATH"
		elif [ -e "/usr/lib/ccache/bin" ]; then
			export PATH="/usr/lib/ccache/bin:$PATH"
		elif [ -e "/usr/lib/ccache" ]; then
			export PATH="/usr/lib64/ccache:$PATH"
		elif [ -e "/usr/lib/ccache/bin" ]; then
			export PATH="/usr/lib64/ccache/bin:$PATH"
		fi
	fi

	if [ -f "/sys/fs/selinux/enforce" ] && [ "$NOSECHECK" != "1" ]; then
		echo 0 > /sys/fs/selinux/enforce
	fi
}

make_environment()
{
	rm -rf "$build"
	mkdir -p "$build""$rootfs" "$tools"
}

stamp()
{
	local target="$1"

	if [ -z "$target" ]; then
		return 1
	fi

	if [ ! -f "${build}/.${target}_stamp" ]; then
		touch "${build}/.${target}_stamp"
	fi
}

check_stamp()
{
	local target="$1"

	if [ -z "$target" ]; then
		return 1
	fi

	if [ -f "${build}/.${target}_stamp" ]; then
		return 0
	else
		return 1
	fi
}
